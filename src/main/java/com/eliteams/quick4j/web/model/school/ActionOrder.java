/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.eliteams.quick4j.web.model.school;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ActionOrder implements TBase<ActionOrder, ActionOrder._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ActionOrder");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short)2);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.STRING, (short)3);
  private static final TField ACTION_DESC_FIELD_DESC = new TField("actionDesc", TType.STRING, (short)4);
  private static final TField ACTION_TYPE_FIELD_DESC = new TField("actionType", TType.STRING, (short)5);
  private static final TField TOTAL_PRICE_FIELD_DESC = new TField("totalPrice", TType.I64, (short)6);
  private static final TField DISTRIBUTION_PRICE_FIELD_DESC = new TField("distributionPrice", TType.I64, (short)7);
  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.STRING, (short)8);
  private static final TField DISTRIBUTOR_ID_FIELD_DESC = new TField("distributorId", TType.STRING, (short)9);
  private static final TField EXTRA_DATA1_FIELD_DESC = new TField("extraData1", TType.STRING, (short)10);
  private static final TField EXTRA_DATA2_FIELD_DESC = new TField("extraData2", TType.STRING, (short)11);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.I64, (short)12);
  private static final TField UPDATE_TIME_FIELD_DESC = new TField("updateTime", TType.I64, (short)13);
  private static final TField PAID_TIME_FIELD_DESC = new TField("paidTime", TType.I64, (short)14);
  private static final TField CANCEL_TIME_FIELD_DESC = new TField("cancelTime", TType.I64, (short)15);
  private static final TField FINISH_TIME_FIELD_DESC = new TField("finishTime", TType.I64, (short)16);

  public long id;
  public String orderId;
  public String status;
  public String actionDesc;
  public String actionType;
  public long totalPrice;
  public long distributionPrice;
  public String userId;
  public String distributorId;
  public String extraData1;
  public String extraData2;
  public long createTime;
  public long updateTime;
  public long paidTime;
  public long cancelTime;
  public long finishTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    ORDER_ID((short)2, "orderId"),
    STATUS((short)3, "status"),
    ACTION_DESC((short)4, "actionDesc"),
    ACTION_TYPE((short)5, "actionType"),
    TOTAL_PRICE((short)6, "totalPrice"),
    DISTRIBUTION_PRICE((short)7, "distributionPrice"),
    USER_ID((short)8, "userId"),
    DISTRIBUTOR_ID((short)9, "distributorId"),
    EXTRA_DATA1((short)10, "extraData1"),
    EXTRA_DATA2((short)11, "extraData2"),
    CREATE_TIME((short)12, "createTime"),
    UPDATE_TIME((short)13, "updateTime"),
    PAID_TIME((short)14, "paidTime"),
    CANCEL_TIME((short)15, "cancelTime"),
    FINISH_TIME((short)16, "finishTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // STATUS
          return STATUS;
        case 4: // ACTION_DESC
          return ACTION_DESC;
        case 5: // ACTION_TYPE
          return ACTION_TYPE;
        case 6: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 7: // DISTRIBUTION_PRICE
          return DISTRIBUTION_PRICE;
        case 8: // USER_ID
          return USER_ID;
        case 9: // DISTRIBUTOR_ID
          return DISTRIBUTOR_ID;
        case 10: // EXTRA_DATA1
          return EXTRA_DATA1;
        case 11: // EXTRA_DATA2
          return EXTRA_DATA2;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // UPDATE_TIME
          return UPDATE_TIME;
        case 14: // PAID_TIME
          return PAID_TIME;
        case 15: // CANCEL_TIME
          return CANCEL_TIME;
        case 16: // FINISH_TIME
          return FINISH_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TOTALPRICE_ISSET_ID = 1;
  private static final int __DISTRIBUTIONPRICE_ISSET_ID = 2;
  private static final int __CREATETIME_ISSET_ID = 3;
  private static final int __UPDATETIME_ISSET_ID = 4;
  private static final int __PAIDTIME_ISSET_ID = 5;
  private static final int __CANCELTIME_ISSET_ID = 6;
  private static final int __FINISHTIME_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACTION_DESC, new FieldMetaData("actionDesc", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACTION_TYPE, new FieldMetaData("actionType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE, new FieldMetaData("totalPrice", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.DISTRIBUTION_PRICE, new FieldMetaData("distributionPrice", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DISTRIBUTOR_ID, new FieldMetaData("distributorId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA_DATA1, new FieldMetaData("extraData1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA_DATA2, new FieldMetaData("extraData2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new FieldMetaData("updateTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.PAID_TIME, new FieldMetaData("paidTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.CANCEL_TIME, new FieldMetaData("cancelTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.FINISH_TIME, new FieldMetaData("finishTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ActionOrder.class, metaDataMap);
  }

  public ActionOrder() {
  }

  public ActionOrder(
    long id,
    String orderId,
    String status,
    String actionDesc,
    String actionType,
    long totalPrice,
    long distributionPrice,
    String userId,
    String distributorId,
    String extraData1,
    String extraData2,
    long createTime,
    long updateTime,
    long paidTime,
    long cancelTime,
    long finishTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.orderId = orderId;
    this.status = status;
    this.actionDesc = actionDesc;
    this.actionType = actionType;
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.distributionPrice = distributionPrice;
    setDistributionPriceIsSet(true);
    this.userId = userId;
    this.distributorId = distributorId;
    this.extraData1 = extraData1;
    this.extraData2 = extraData2;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.paidTime = paidTime;
    setPaidTimeIsSet(true);
    this.cancelTime = cancelTime;
    setCancelTimeIsSet(true);
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActionOrder(ActionOrder other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetActionDesc()) {
      this.actionDesc = other.actionDesc;
    }
    if (other.isSetActionType()) {
      this.actionType = other.actionType;
    }
    this.totalPrice = other.totalPrice;
    this.distributionPrice = other.distributionPrice;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetDistributorId()) {
      this.distributorId = other.distributorId;
    }
    if (other.isSetExtraData1()) {
      this.extraData1 = other.extraData1;
    }
    if (other.isSetExtraData2()) {
      this.extraData2 = other.extraData2;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.paidTime = other.paidTime;
    this.cancelTime = other.cancelTime;
    this.finishTime = other.finishTime;
  }

  public ActionOrder deepCopy() {
    return new ActionOrder(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.orderId = null;
    this.status = null;
    this.actionDesc = null;
    this.actionType = null;
    setTotalPriceIsSet(false);
    this.totalPrice = 0;
    setDistributionPriceIsSet(false);
    this.distributionPrice = 0;
    this.userId = null;
    this.distributorId = null;
    this.extraData1 = null;
    this.extraData2 = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setPaidTimeIsSet(false);
    this.paidTime = 0;
    setCancelTimeIsSet(false);
    this.cancelTime = 0;
    setFinishTimeIsSet(false);
    this.finishTime = 0;
  }

  public long getId() {
    return this.id;
  }

  public ActionOrder setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getOrderId() {
    return this.orderId;
  }

  public ActionOrder setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public ActionOrder setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getActionDesc() {
    return this.actionDesc;
  }

  public ActionOrder setActionDesc(String actionDesc) {
    this.actionDesc = actionDesc;
    return this;
  }

  public void unsetActionDesc() {
    this.actionDesc = null;
  }

  /** Returns true if field actionDesc is set (has been asigned a value) and false otherwise */
  public boolean isSetActionDesc() {
    return this.actionDesc != null;
  }

  public void setActionDescIsSet(boolean value) {
    if (!value) {
      this.actionDesc = null;
    }
  }

  public String getActionType() {
    return this.actionType;
  }

  public ActionOrder setActionType(String actionType) {
    this.actionType = actionType;
    return this;
  }

  public void unsetActionType() {
    this.actionType = null;
  }

  /** Returns true if field actionType is set (has been asigned a value) and false otherwise */
  public boolean isSetActionType() {
    return this.actionType != null;
  }

  public void setActionTypeIsSet(boolean value) {
    if (!value) {
      this.actionType = null;
    }
  }

  public long getTotalPrice() {
    return this.totalPrice;
  }

  public ActionOrder setTotalPrice(long totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bit_vector.clear(__TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return __isset_bit_vector.get(__TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALPRICE_ISSET_ID, value);
  }

  public long getDistributionPrice() {
    return this.distributionPrice;
  }

  public ActionOrder setDistributionPrice(long distributionPrice) {
    this.distributionPrice = distributionPrice;
    setDistributionPriceIsSet(true);
    return this;
  }

  public void unsetDistributionPrice() {
    __isset_bit_vector.clear(__DISTRIBUTIONPRICE_ISSET_ID);
  }

  /** Returns true if field distributionPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetDistributionPrice() {
    return __isset_bit_vector.get(__DISTRIBUTIONPRICE_ISSET_ID);
  }

  public void setDistributionPriceIsSet(boolean value) {
    __isset_bit_vector.set(__DISTRIBUTIONPRICE_ISSET_ID, value);
  }

  public String getUserId() {
    return this.userId;
  }

  public ActionOrder setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getDistributorId() {
    return this.distributorId;
  }

  public ActionOrder setDistributorId(String distributorId) {
    this.distributorId = distributorId;
    return this;
  }

  public void unsetDistributorId() {
    this.distributorId = null;
  }

  /** Returns true if field distributorId is set (has been asigned a value) and false otherwise */
  public boolean isSetDistributorId() {
    return this.distributorId != null;
  }

  public void setDistributorIdIsSet(boolean value) {
    if (!value) {
      this.distributorId = null;
    }
  }

  public String getExtraData1() {
    return this.extraData1;
  }

  public ActionOrder setExtraData1(String extraData1) {
    this.extraData1 = extraData1;
    return this;
  }

  public void unsetExtraData1() {
    this.extraData1 = null;
  }

  /** Returns true if field extraData1 is set (has been asigned a value) and false otherwise */
  public boolean isSetExtraData1() {
    return this.extraData1 != null;
  }

  public void setExtraData1IsSet(boolean value) {
    if (!value) {
      this.extraData1 = null;
    }
  }

  public String getExtraData2() {
    return this.extraData2;
  }

  public ActionOrder setExtraData2(String extraData2) {
    this.extraData2 = extraData2;
    return this;
  }

  public void unsetExtraData2() {
    this.extraData2 = null;
  }

  /** Returns true if field extraData2 is set (has been asigned a value) and false otherwise */
  public boolean isSetExtraData2() {
    return this.extraData2 != null;
  }

  public void setExtraData2IsSet(boolean value) {
    if (!value) {
      this.extraData2 = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public ActionOrder setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bit_vector.clear(__CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return __isset_bit_vector.get(__CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public ActionOrder setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bit_vector.clear(__UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return __isset_bit_vector.get(__UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATETIME_ISSET_ID, value);
  }

  public long getPaidTime() {
    return this.paidTime;
  }

  public ActionOrder setPaidTime(long paidTime) {
    this.paidTime = paidTime;
    setPaidTimeIsSet(true);
    return this;
  }

  public void unsetPaidTime() {
    __isset_bit_vector.clear(__PAIDTIME_ISSET_ID);
  }

  /** Returns true if field paidTime is set (has been asigned a value) and false otherwise */
  public boolean isSetPaidTime() {
    return __isset_bit_vector.get(__PAIDTIME_ISSET_ID);
  }

  public void setPaidTimeIsSet(boolean value) {
    __isset_bit_vector.set(__PAIDTIME_ISSET_ID, value);
  }

  public long getCancelTime() {
    return this.cancelTime;
  }

  public ActionOrder setCancelTime(long cancelTime) {
    this.cancelTime = cancelTime;
    setCancelTimeIsSet(true);
    return this;
  }

  public void unsetCancelTime() {
    __isset_bit_vector.clear(__CANCELTIME_ISSET_ID);
  }

  /** Returns true if field cancelTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCancelTime() {
    return __isset_bit_vector.get(__CANCELTIME_ISSET_ID);
  }

  public void setCancelTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CANCELTIME_ISSET_ID, value);
  }

  public long getFinishTime() {
    return this.finishTime;
  }

  public ActionOrder setFinishTime(long finishTime) {
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bit_vector.clear(__FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishTime is set (has been asigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return __isset_bit_vector.get(__FINISHTIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bit_vector.set(__FINISHTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case ACTION_DESC:
      if (value == null) {
        unsetActionDesc();
      } else {
        setActionDesc((String)value);
      }
      break;

    case ACTION_TYPE:
      if (value == null) {
        unsetActionType();
      } else {
        setActionType((String)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Long)value);
      }
      break;

    case DISTRIBUTION_PRICE:
      if (value == null) {
        unsetDistributionPrice();
      } else {
        setDistributionPrice((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case DISTRIBUTOR_ID:
      if (value == null) {
        unsetDistributorId();
      } else {
        setDistributorId((String)value);
      }
      break;

    case EXTRA_DATA1:
      if (value == null) {
        unsetExtraData1();
      } else {
        setExtraData1((String)value);
      }
      break;

    case EXTRA_DATA2:
      if (value == null) {
        unsetExtraData2();
      } else {
        setExtraData2((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case PAID_TIME:
      if (value == null) {
        unsetPaidTime();
      } else {
        setPaidTime((Long)value);
      }
      break;

    case CANCEL_TIME:
      if (value == null) {
        unsetCancelTime();
      } else {
        setCancelTime((Long)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());

    case ORDER_ID:
      return getOrderId();

    case STATUS:
      return getStatus();

    case ACTION_DESC:
      return getActionDesc();

    case ACTION_TYPE:
      return getActionType();

    case TOTAL_PRICE:
      return new Long(getTotalPrice());

    case DISTRIBUTION_PRICE:
      return new Long(getDistributionPrice());

    case USER_ID:
      return getUserId();

    case DISTRIBUTOR_ID:
      return getDistributorId();

    case EXTRA_DATA1:
      return getExtraData1();

    case EXTRA_DATA2:
      return getExtraData2();

    case CREATE_TIME:
      return new Long(getCreateTime());

    case UPDATE_TIME:
      return new Long(getUpdateTime());

    case PAID_TIME:
      return new Long(getPaidTime());

    case CANCEL_TIME:
      return new Long(getCancelTime());

    case FINISH_TIME:
      return new Long(getFinishTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ORDER_ID:
      return isSetOrderId();
    case STATUS:
      return isSetStatus();
    case ACTION_DESC:
      return isSetActionDesc();
    case ACTION_TYPE:
      return isSetActionType();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case DISTRIBUTION_PRICE:
      return isSetDistributionPrice();
    case USER_ID:
      return isSetUserId();
    case DISTRIBUTOR_ID:
      return isSetDistributorId();
    case EXTRA_DATA1:
      return isSetExtraData1();
    case EXTRA_DATA2:
      return isSetExtraData2();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case PAID_TIME:
      return isSetPaidTime();
    case CANCEL_TIME:
      return isSetCancelTime();
    case FINISH_TIME:
      return isSetFinishTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActionOrder)
      return this.equals((ActionOrder)that);
    return false;
  }

  public boolean equals(ActionOrder that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_actionDesc = true && this.isSetActionDesc();
    boolean that_present_actionDesc = true && that.isSetActionDesc();
    if (this_present_actionDesc || that_present_actionDesc) {
      if (!(this_present_actionDesc && that_present_actionDesc))
        return false;
      if (!this.actionDesc.equals(that.actionDesc))
        return false;
    }

    boolean this_present_actionType = true && this.isSetActionType();
    boolean that_present_actionType = true && that.isSetActionType();
    if (this_present_actionType || that_present_actionType) {
      if (!(this_present_actionType && that_present_actionType))
        return false;
      if (!this.actionType.equals(that.actionType))
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_distributionPrice = true;
    boolean that_present_distributionPrice = true;
    if (this_present_distributionPrice || that_present_distributionPrice) {
      if (!(this_present_distributionPrice && that_present_distributionPrice))
        return false;
      if (this.distributionPrice != that.distributionPrice)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_distributorId = true && this.isSetDistributorId();
    boolean that_present_distributorId = true && that.isSetDistributorId();
    if (this_present_distributorId || that_present_distributorId) {
      if (!(this_present_distributorId && that_present_distributorId))
        return false;
      if (!this.distributorId.equals(that.distributorId))
        return false;
    }

    boolean this_present_extraData1 = true && this.isSetExtraData1();
    boolean that_present_extraData1 = true && that.isSetExtraData1();
    if (this_present_extraData1 || that_present_extraData1) {
      if (!(this_present_extraData1 && that_present_extraData1))
        return false;
      if (!this.extraData1.equals(that.extraData1))
        return false;
    }

    boolean this_present_extraData2 = true && this.isSetExtraData2();
    boolean that_present_extraData2 = true && that.isSetExtraData2();
    if (this_present_extraData2 || that_present_extraData2) {
      if (!(this_present_extraData2 && that_present_extraData2))
        return false;
      if (!this.extraData2.equals(that.extraData2))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_paidTime = true;
    boolean that_present_paidTime = true;
    if (this_present_paidTime || that_present_paidTime) {
      if (!(this_present_paidTime && that_present_paidTime))
        return false;
      if (this.paidTime != that.paidTime)
        return false;
    }

    boolean this_present_cancelTime = true;
    boolean that_present_cancelTime = true;
    if (this_present_cancelTime || that_present_cancelTime) {
      if (!(this_present_cancelTime && that_present_cancelTime))
        return false;
      if (this.cancelTime != that.cancelTime)
        return false;
    }

    boolean this_present_finishTime = true;
    boolean that_present_finishTime = true;
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (this.finishTime != that.finishTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActionOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActionOrder typedOther = (ActionOrder)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDesc()).compareTo(typedOther.isSetActionDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDesc()) {
      lastComparison = TBaseHelper.compareTo(this.actionDesc, typedOther.actionDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionType()).compareTo(typedOther.isSetActionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionType()) {
      lastComparison = TBaseHelper.compareTo(this.actionType, typedOther.actionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(typedOther.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = TBaseHelper.compareTo(this.totalPrice, typedOther.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistributionPrice()).compareTo(typedOther.isSetDistributionPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistributionPrice()) {
      lastComparison = TBaseHelper.compareTo(this.distributionPrice, typedOther.distributionPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistributorId()).compareTo(typedOther.isSetDistributorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistributorId()) {
      lastComparison = TBaseHelper.compareTo(this.distributorId, typedOther.distributorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraData1()).compareTo(typedOther.isSetExtraData1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraData1()) {
      lastComparison = TBaseHelper.compareTo(this.extraData1, typedOther.extraData1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraData2()).compareTo(typedOther.isSetExtraData2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraData2()) {
      lastComparison = TBaseHelper.compareTo(this.extraData2, typedOther.extraData2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaidTime()).compareTo(typedOther.isSetPaidTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaidTime()) {
      lastComparison = TBaseHelper.compareTo(this.paidTime, typedOther.paidTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTime()).compareTo(typedOther.isSetCancelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTime()) {
      lastComparison = TBaseHelper.compareTo(this.cancelTime, typedOther.cancelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(typedOther.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = TBaseHelper.compareTo(this.finishTime, typedOther.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ORDER_ID
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // STATUS
          if (field.type == TType.STRING) {
            this.status = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ACTION_DESC
          if (field.type == TType.STRING) {
            this.actionDesc = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ACTION_TYPE
          if (field.type == TType.STRING) {
            this.actionType = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TOTAL_PRICE
          if (field.type == TType.I64) {
            this.totalPrice = iprot.readI64();
            setTotalPriceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DISTRIBUTION_PRICE
          if (field.type == TType.I64) {
            this.distributionPrice = iprot.readI64();
            setDistributionPriceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // USER_ID
          if (field.type == TType.STRING) {
            this.userId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // DISTRIBUTOR_ID
          if (field.type == TType.STRING) {
            this.distributorId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // EXTRA_DATA1
          if (field.type == TType.STRING) {
            this.extraData1 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // EXTRA_DATA2
          if (field.type == TType.STRING) {
            this.extraData2 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // CREATE_TIME
          if (field.type == TType.I64) {
            this.createTime = iprot.readI64();
            setCreateTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // UPDATE_TIME
          if (field.type == TType.I64) {
            this.updateTime = iprot.readI64();
            setUpdateTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // PAID_TIME
          if (field.type == TType.I64) {
            this.paidTime = iprot.readI64();
            setPaidTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // CANCEL_TIME
          if (field.type == TType.I64) {
            this.cancelTime = iprot.readI64();
            setCancelTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // FINISH_TIME
          if (field.type == TType.I64) {
            this.finishTime = iprot.readI64();
            setFinishTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    if (this.orderId != null) {
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeString(this.status);
      oprot.writeFieldEnd();
    }
    if (this.actionDesc != null) {
      oprot.writeFieldBegin(ACTION_DESC_FIELD_DESC);
      oprot.writeString(this.actionDesc);
      oprot.writeFieldEnd();
    }
    if (this.actionType != null) {
      oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
      oprot.writeString(this.actionType);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
    oprot.writeI64(this.totalPrice);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DISTRIBUTION_PRICE_FIELD_DESC);
    oprot.writeI64(this.distributionPrice);
    oprot.writeFieldEnd();
    if (this.userId != null) {
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    if (this.distributorId != null) {
      oprot.writeFieldBegin(DISTRIBUTOR_ID_FIELD_DESC);
      oprot.writeString(this.distributorId);
      oprot.writeFieldEnd();
    }
    if (this.extraData1 != null) {
      oprot.writeFieldBegin(EXTRA_DATA1_FIELD_DESC);
      oprot.writeString(this.extraData1);
      oprot.writeFieldEnd();
    }
    if (this.extraData2 != null) {
      oprot.writeFieldBegin(EXTRA_DATA2_FIELD_DESC);
      oprot.writeString(this.extraData2);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
    oprot.writeI64(this.createTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
    oprot.writeI64(this.updateTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PAID_TIME_FIELD_DESC);
    oprot.writeI64(this.paidTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CANCEL_TIME_FIELD_DESC);
    oprot.writeI64(this.cancelTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
    oprot.writeI64(this.finishTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActionOrder(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionDesc:");
    if (this.actionDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.actionDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionType:");
    if (this.actionType == null) {
      sb.append("null");
    } else {
      sb.append(this.actionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("distributionPrice:");
    sb.append(this.distributionPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distributorId:");
    if (this.distributorId == null) {
      sb.append("null");
    } else {
      sb.append(this.distributorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraData1:");
    if (this.extraData1 == null) {
      sb.append("null");
    } else {
      sb.append(this.extraData1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraData2:");
    if (this.extraData2 == null) {
      sb.append("null");
    } else {
      sb.append(this.extraData2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paidTime:");
    sb.append(this.paidTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelTime:");
    sb.append(this.cancelTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    sb.append(this.finishTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

