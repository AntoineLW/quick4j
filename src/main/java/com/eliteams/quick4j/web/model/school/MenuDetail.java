/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.eliteams.quick4j.web.model.school;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MenuDetail implements TBase<MenuDetail, MenuDetail._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MenuDetail");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField MENU_ID_FIELD_DESC = new TField("menuId", TType.STRING, (short)2);
  private static final TField MENU_NAME_FIELD_DESC = new TField("menuName", TType.STRING, (short)3);
  private static final TField CLASSIFICATION_FIELD_DESC = new TField("classification", TType.STRING, (short)4);
  private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short)5);
  private static final TField ACTUAL_PRICE_FIELD_DESC = new TField("actualPrice", TType.I64, (short)6);
  private static final TField ORIGIN_PRICE_FIELD_DESC = new TField("originPrice", TType.I64, (short)7);
  private static final TField DISCOUNT_TYPE_FIELD_DESC = new TField("discountType", TType.STRING, (short)8);
  private static final TField BELONG_CANTEEN_FIELD_DESC = new TField("belongCanteen", TType.STRING, (short)9);
  private static final TField BELONG_SELLER_FIELD_DESC = new TField("belongSeller", TType.STRING, (short)10);
  private static final TField MENU_PHOTO_JSONS_FIELD_DESC = new TField("menuPhotoJsons", TType.STRING, (short)11);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.STRING, (short)12);
  private static final TField EXTRA_DATA1_FIELD_DESC = new TField("extraData1", TType.STRING, (short)13);
  private static final TField EXTRA_DATA2_FIELD_DESC = new TField("extraData2", TType.STRING, (short)14);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.I64, (short)15);
  private static final TField UPDATE_TIME_FIELD_DESC = new TField("updateTime", TType.I64, (short)16);
  private static final TField ON_SALE_TIME_FIELD_DESC = new TField("onSaleTime", TType.I64, (short)17);
  private static final TField OFF_SALE_TIME_FIELD_DESC = new TField("offSaleTime", TType.I64, (short)18);

  public long id;
  public String menuId;
  public String menuName;
  public String classification;
  public String description;
  public long actualPrice;
  public long originPrice;
  public String discountType;
  public String belongCanteen;
  public String belongSeller;
  public String menuPhotoJsons;
  public String status;
  public String extraData1;
  public String extraData2;
  public long createTime;
  public long updateTime;
  public long onSaleTime;
  public long offSaleTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    MENU_ID((short)2, "menuId"),
    MENU_NAME((short)3, "menuName"),
    CLASSIFICATION((short)4, "classification"),
    DESCRIPTION((short)5, "description"),
    ACTUAL_PRICE((short)6, "actualPrice"),
    ORIGIN_PRICE((short)7, "originPrice"),
    DISCOUNT_TYPE((short)8, "discountType"),
    BELONG_CANTEEN((short)9, "belongCanteen"),
    BELONG_SELLER((short)10, "belongSeller"),
    MENU_PHOTO_JSONS((short)11, "menuPhotoJsons"),
    STATUS((short)12, "status"),
    EXTRA_DATA1((short)13, "extraData1"),
    EXTRA_DATA2((short)14, "extraData2"),
    CREATE_TIME((short)15, "createTime"),
    UPDATE_TIME((short)16, "updateTime"),
    ON_SALE_TIME((short)17, "onSaleTime"),
    OFF_SALE_TIME((short)18, "offSaleTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MENU_ID
          return MENU_ID;
        case 3: // MENU_NAME
          return MENU_NAME;
        case 4: // CLASSIFICATION
          return CLASSIFICATION;
        case 5: // DESCRIPTION
          return DESCRIPTION;
        case 6: // ACTUAL_PRICE
          return ACTUAL_PRICE;
        case 7: // ORIGIN_PRICE
          return ORIGIN_PRICE;
        case 8: // DISCOUNT_TYPE
          return DISCOUNT_TYPE;
        case 9: // BELONG_CANTEEN
          return BELONG_CANTEEN;
        case 10: // BELONG_SELLER
          return BELONG_SELLER;
        case 11: // MENU_PHOTO_JSONS
          return MENU_PHOTO_JSONS;
        case 12: // STATUS
          return STATUS;
        case 13: // EXTRA_DATA1
          return EXTRA_DATA1;
        case 14: // EXTRA_DATA2
          return EXTRA_DATA2;
        case 15: // CREATE_TIME
          return CREATE_TIME;
        case 16: // UPDATE_TIME
          return UPDATE_TIME;
        case 17: // ON_SALE_TIME
          return ON_SALE_TIME;
        case 18: // OFF_SALE_TIME
          return OFF_SALE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ACTUALPRICE_ISSET_ID = 1;
  private static final int __ORIGINPRICE_ISSET_ID = 2;
  private static final int __CREATETIME_ISSET_ID = 3;
  private static final int __UPDATETIME_ISSET_ID = 4;
  private static final int __ONSALETIME_ISSET_ID = 5;
  private static final int __OFFSALETIME_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.MENU_ID, new FieldMetaData("menuId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MENU_NAME, new FieldMetaData("menuName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CLASSIFICATION, new FieldMetaData("classification", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_PRICE, new FieldMetaData("actualPrice", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.ORIGIN_PRICE, new FieldMetaData("originPrice", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.DISCOUNT_TYPE, new FieldMetaData("discountType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BELONG_CANTEEN, new FieldMetaData("belongCanteen", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BELONG_SELLER, new FieldMetaData("belongSeller", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MENU_PHOTO_JSONS, new FieldMetaData("menuPhotoJsons", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA_DATA1, new FieldMetaData("extraData1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA_DATA2, new FieldMetaData("extraData2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new FieldMetaData("updateTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.ON_SALE_TIME, new FieldMetaData("onSaleTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.OFF_SALE_TIME, new FieldMetaData("offSaleTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(MenuDetail.class, metaDataMap);
  }

  public MenuDetail() {
  }

  public MenuDetail(
    long id,
    String menuId,
    String menuName,
    String classification,
    String description,
    long actualPrice,
    long originPrice,
    String discountType,
    String belongCanteen,
    String belongSeller,
    String menuPhotoJsons,
    String status,
    String extraData1,
    String extraData2,
    long createTime,
    long updateTime,
    long onSaleTime,
    long offSaleTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.menuId = menuId;
    this.menuName = menuName;
    this.classification = classification;
    this.description = description;
    this.actualPrice = actualPrice;
    setActualPriceIsSet(true);
    this.originPrice = originPrice;
    setOriginPriceIsSet(true);
    this.discountType = discountType;
    this.belongCanteen = belongCanteen;
    this.belongSeller = belongSeller;
    this.menuPhotoJsons = menuPhotoJsons;
    this.status = status;
    this.extraData1 = extraData1;
    this.extraData2 = extraData2;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.onSaleTime = onSaleTime;
    setOnSaleTimeIsSet(true);
    this.offSaleTime = offSaleTime;
    setOffSaleTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MenuDetail(MenuDetail other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetMenuId()) {
      this.menuId = other.menuId;
    }
    if (other.isSetMenuName()) {
      this.menuName = other.menuName;
    }
    if (other.isSetClassification()) {
      this.classification = other.classification;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.actualPrice = other.actualPrice;
    this.originPrice = other.originPrice;
    if (other.isSetDiscountType()) {
      this.discountType = other.discountType;
    }
    if (other.isSetBelongCanteen()) {
      this.belongCanteen = other.belongCanteen;
    }
    if (other.isSetBelongSeller()) {
      this.belongSeller = other.belongSeller;
    }
    if (other.isSetMenuPhotoJsons()) {
      this.menuPhotoJsons = other.menuPhotoJsons;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetExtraData1()) {
      this.extraData1 = other.extraData1;
    }
    if (other.isSetExtraData2()) {
      this.extraData2 = other.extraData2;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.onSaleTime = other.onSaleTime;
    this.offSaleTime = other.offSaleTime;
  }

  public MenuDetail deepCopy() {
    return new MenuDetail(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.menuId = null;
    this.menuName = null;
    this.classification = null;
    this.description = null;
    setActualPriceIsSet(false);
    this.actualPrice = 0;
    setOriginPriceIsSet(false);
    this.originPrice = 0;
    this.discountType = null;
    this.belongCanteen = null;
    this.belongSeller = null;
    this.menuPhotoJsons = null;
    this.status = null;
    this.extraData1 = null;
    this.extraData2 = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setOnSaleTimeIsSet(false);
    this.onSaleTime = 0;
    setOffSaleTimeIsSet(false);
    this.offSaleTime = 0;
  }

  public long getId() {
    return this.id;
  }

  public MenuDetail setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getMenuId() {
    return this.menuId;
  }

  public MenuDetail setMenuId(String menuId) {
    this.menuId = menuId;
    return this;
  }

  public void unsetMenuId() {
    this.menuId = null;
  }

  /** Returns true if field menuId is set (has been asigned a value) and false otherwise */
  public boolean isSetMenuId() {
    return this.menuId != null;
  }

  public void setMenuIdIsSet(boolean value) {
    if (!value) {
      this.menuId = null;
    }
  }

  public String getMenuName() {
    return this.menuName;
  }

  public MenuDetail setMenuName(String menuName) {
    this.menuName = menuName;
    return this;
  }

  public void unsetMenuName() {
    this.menuName = null;
  }

  /** Returns true if field menuName is set (has been asigned a value) and false otherwise */
  public boolean isSetMenuName() {
    return this.menuName != null;
  }

  public void setMenuNameIsSet(boolean value) {
    if (!value) {
      this.menuName = null;
    }
  }

  public String getClassification() {
    return this.classification;
  }

  public MenuDetail setClassification(String classification) {
    this.classification = classification;
    return this;
  }

  public void unsetClassification() {
    this.classification = null;
  }

  /** Returns true if field classification is set (has been asigned a value) and false otherwise */
  public boolean isSetClassification() {
    return this.classification != null;
  }

  public void setClassificationIsSet(boolean value) {
    if (!value) {
      this.classification = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public MenuDetail setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been asigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public long getActualPrice() {
    return this.actualPrice;
  }

  public MenuDetail setActualPrice(long actualPrice) {
    this.actualPrice = actualPrice;
    setActualPriceIsSet(true);
    return this;
  }

  public void unsetActualPrice() {
    __isset_bit_vector.clear(__ACTUALPRICE_ISSET_ID);
  }

  /** Returns true if field actualPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetActualPrice() {
    return __isset_bit_vector.get(__ACTUALPRICE_ISSET_ID);
  }

  public void setActualPriceIsSet(boolean value) {
    __isset_bit_vector.set(__ACTUALPRICE_ISSET_ID, value);
  }

  public long getOriginPrice() {
    return this.originPrice;
  }

  public MenuDetail setOriginPrice(long originPrice) {
    this.originPrice = originPrice;
    setOriginPriceIsSet(true);
    return this;
  }

  public void unsetOriginPrice() {
    __isset_bit_vector.clear(__ORIGINPRICE_ISSET_ID);
  }

  /** Returns true if field originPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetOriginPrice() {
    return __isset_bit_vector.get(__ORIGINPRICE_ISSET_ID);
  }

  public void setOriginPriceIsSet(boolean value) {
    __isset_bit_vector.set(__ORIGINPRICE_ISSET_ID, value);
  }

  public String getDiscountType() {
    return this.discountType;
  }

  public MenuDetail setDiscountType(String discountType) {
    this.discountType = discountType;
    return this;
  }

  public void unsetDiscountType() {
    this.discountType = null;
  }

  /** Returns true if field discountType is set (has been asigned a value) and false otherwise */
  public boolean isSetDiscountType() {
    return this.discountType != null;
  }

  public void setDiscountTypeIsSet(boolean value) {
    if (!value) {
      this.discountType = null;
    }
  }

  public String getBelongCanteen() {
    return this.belongCanteen;
  }

  public MenuDetail setBelongCanteen(String belongCanteen) {
    this.belongCanteen = belongCanteen;
    return this;
  }

  public void unsetBelongCanteen() {
    this.belongCanteen = null;
  }

  /** Returns true if field belongCanteen is set (has been asigned a value) and false otherwise */
  public boolean isSetBelongCanteen() {
    return this.belongCanteen != null;
  }

  public void setBelongCanteenIsSet(boolean value) {
    if (!value) {
      this.belongCanteen = null;
    }
  }

  public String getBelongSeller() {
    return this.belongSeller;
  }

  public MenuDetail setBelongSeller(String belongSeller) {
    this.belongSeller = belongSeller;
    return this;
  }

  public void unsetBelongSeller() {
    this.belongSeller = null;
  }

  /** Returns true if field belongSeller is set (has been asigned a value) and false otherwise */
  public boolean isSetBelongSeller() {
    return this.belongSeller != null;
  }

  public void setBelongSellerIsSet(boolean value) {
    if (!value) {
      this.belongSeller = null;
    }
  }

  public String getMenuPhotoJsons() {
    return this.menuPhotoJsons;
  }

  public MenuDetail setMenuPhotoJsons(String menuPhotoJsons) {
    this.menuPhotoJsons = menuPhotoJsons;
    return this;
  }

  public void unsetMenuPhotoJsons() {
    this.menuPhotoJsons = null;
  }

  /** Returns true if field menuPhotoJsons is set (has been asigned a value) and false otherwise */
  public boolean isSetMenuPhotoJsons() {
    return this.menuPhotoJsons != null;
  }

  public void setMenuPhotoJsonsIsSet(boolean value) {
    if (!value) {
      this.menuPhotoJsons = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public MenuDetail setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getExtraData1() {
    return this.extraData1;
  }

  public MenuDetail setExtraData1(String extraData1) {
    this.extraData1 = extraData1;
    return this;
  }

  public void unsetExtraData1() {
    this.extraData1 = null;
  }

  /** Returns true if field extraData1 is set (has been asigned a value) and false otherwise */
  public boolean isSetExtraData1() {
    return this.extraData1 != null;
  }

  public void setExtraData1IsSet(boolean value) {
    if (!value) {
      this.extraData1 = null;
    }
  }

  public String getExtraData2() {
    return this.extraData2;
  }

  public MenuDetail setExtraData2(String extraData2) {
    this.extraData2 = extraData2;
    return this;
  }

  public void unsetExtraData2() {
    this.extraData2 = null;
  }

  /** Returns true if field extraData2 is set (has been asigned a value) and false otherwise */
  public boolean isSetExtraData2() {
    return this.extraData2 != null;
  }

  public void setExtraData2IsSet(boolean value) {
    if (!value) {
      this.extraData2 = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public MenuDetail setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bit_vector.clear(__CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return __isset_bit_vector.get(__CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public MenuDetail setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bit_vector.clear(__UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return __isset_bit_vector.get(__UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATETIME_ISSET_ID, value);
  }

  public long getOnSaleTime() {
    return this.onSaleTime;
  }

  public MenuDetail setOnSaleTime(long onSaleTime) {
    this.onSaleTime = onSaleTime;
    setOnSaleTimeIsSet(true);
    return this;
  }

  public void unsetOnSaleTime() {
    __isset_bit_vector.clear(__ONSALETIME_ISSET_ID);
  }

  /** Returns true if field onSaleTime is set (has been asigned a value) and false otherwise */
  public boolean isSetOnSaleTime() {
    return __isset_bit_vector.get(__ONSALETIME_ISSET_ID);
  }

  public void setOnSaleTimeIsSet(boolean value) {
    __isset_bit_vector.set(__ONSALETIME_ISSET_ID, value);
  }

  public long getOffSaleTime() {
    return this.offSaleTime;
  }

  public MenuDetail setOffSaleTime(long offSaleTime) {
    this.offSaleTime = offSaleTime;
    setOffSaleTimeIsSet(true);
    return this;
  }

  public void unsetOffSaleTime() {
    __isset_bit_vector.clear(__OFFSALETIME_ISSET_ID);
  }

  /** Returns true if field offSaleTime is set (has been asigned a value) and false otherwise */
  public boolean isSetOffSaleTime() {
    return __isset_bit_vector.get(__OFFSALETIME_ISSET_ID);
  }

  public void setOffSaleTimeIsSet(boolean value) {
    __isset_bit_vector.set(__OFFSALETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MENU_ID:
      if (value == null) {
        unsetMenuId();
      } else {
        setMenuId((String)value);
      }
      break;

    case MENU_NAME:
      if (value == null) {
        unsetMenuName();
      } else {
        setMenuName((String)value);
      }
      break;

    case CLASSIFICATION:
      if (value == null) {
        unsetClassification();
      } else {
        setClassification((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case ACTUAL_PRICE:
      if (value == null) {
        unsetActualPrice();
      } else {
        setActualPrice((Long)value);
      }
      break;

    case ORIGIN_PRICE:
      if (value == null) {
        unsetOriginPrice();
      } else {
        setOriginPrice((Long)value);
      }
      break;

    case DISCOUNT_TYPE:
      if (value == null) {
        unsetDiscountType();
      } else {
        setDiscountType((String)value);
      }
      break;

    case BELONG_CANTEEN:
      if (value == null) {
        unsetBelongCanteen();
      } else {
        setBelongCanteen((String)value);
      }
      break;

    case BELONG_SELLER:
      if (value == null) {
        unsetBelongSeller();
      } else {
        setBelongSeller((String)value);
      }
      break;

    case MENU_PHOTO_JSONS:
      if (value == null) {
        unsetMenuPhotoJsons();
      } else {
        setMenuPhotoJsons((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case EXTRA_DATA1:
      if (value == null) {
        unsetExtraData1();
      } else {
        setExtraData1((String)value);
      }
      break;

    case EXTRA_DATA2:
      if (value == null) {
        unsetExtraData2();
      } else {
        setExtraData2((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ON_SALE_TIME:
      if (value == null) {
        unsetOnSaleTime();
      } else {
        setOnSaleTime((Long)value);
      }
      break;

    case OFF_SALE_TIME:
      if (value == null) {
        unsetOffSaleTime();
      } else {
        setOffSaleTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());

    case MENU_ID:
      return getMenuId();

    case MENU_NAME:
      return getMenuName();

    case CLASSIFICATION:
      return getClassification();

    case DESCRIPTION:
      return getDescription();

    case ACTUAL_PRICE:
      return new Long(getActualPrice());

    case ORIGIN_PRICE:
      return new Long(getOriginPrice());

    case DISCOUNT_TYPE:
      return getDiscountType();

    case BELONG_CANTEEN:
      return getBelongCanteen();

    case BELONG_SELLER:
      return getBelongSeller();

    case MENU_PHOTO_JSONS:
      return getMenuPhotoJsons();

    case STATUS:
      return getStatus();

    case EXTRA_DATA1:
      return getExtraData1();

    case EXTRA_DATA2:
      return getExtraData2();

    case CREATE_TIME:
      return new Long(getCreateTime());

    case UPDATE_TIME:
      return new Long(getUpdateTime());

    case ON_SALE_TIME:
      return new Long(getOnSaleTime());

    case OFF_SALE_TIME:
      return new Long(getOffSaleTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MENU_ID:
      return isSetMenuId();
    case MENU_NAME:
      return isSetMenuName();
    case CLASSIFICATION:
      return isSetClassification();
    case DESCRIPTION:
      return isSetDescription();
    case ACTUAL_PRICE:
      return isSetActualPrice();
    case ORIGIN_PRICE:
      return isSetOriginPrice();
    case DISCOUNT_TYPE:
      return isSetDiscountType();
    case BELONG_CANTEEN:
      return isSetBelongCanteen();
    case BELONG_SELLER:
      return isSetBelongSeller();
    case MENU_PHOTO_JSONS:
      return isSetMenuPhotoJsons();
    case STATUS:
      return isSetStatus();
    case EXTRA_DATA1:
      return isSetExtraData1();
    case EXTRA_DATA2:
      return isSetExtraData2();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ON_SALE_TIME:
      return isSetOnSaleTime();
    case OFF_SALE_TIME:
      return isSetOffSaleTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MenuDetail)
      return this.equals((MenuDetail)that);
    return false;
  }

  public boolean equals(MenuDetail that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_menuId = true && this.isSetMenuId();
    boolean that_present_menuId = true && that.isSetMenuId();
    if (this_present_menuId || that_present_menuId) {
      if (!(this_present_menuId && that_present_menuId))
        return false;
      if (!this.menuId.equals(that.menuId))
        return false;
    }

    boolean this_present_menuName = true && this.isSetMenuName();
    boolean that_present_menuName = true && that.isSetMenuName();
    if (this_present_menuName || that_present_menuName) {
      if (!(this_present_menuName && that_present_menuName))
        return false;
      if (!this.menuName.equals(that.menuName))
        return false;
    }

    boolean this_present_classification = true && this.isSetClassification();
    boolean that_present_classification = true && that.isSetClassification();
    if (this_present_classification || that_present_classification) {
      if (!(this_present_classification && that_present_classification))
        return false;
      if (!this.classification.equals(that.classification))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_actualPrice = true;
    boolean that_present_actualPrice = true;
    if (this_present_actualPrice || that_present_actualPrice) {
      if (!(this_present_actualPrice && that_present_actualPrice))
        return false;
      if (this.actualPrice != that.actualPrice)
        return false;
    }

    boolean this_present_originPrice = true;
    boolean that_present_originPrice = true;
    if (this_present_originPrice || that_present_originPrice) {
      if (!(this_present_originPrice && that_present_originPrice))
        return false;
      if (this.originPrice != that.originPrice)
        return false;
    }

    boolean this_present_discountType = true && this.isSetDiscountType();
    boolean that_present_discountType = true && that.isSetDiscountType();
    if (this_present_discountType || that_present_discountType) {
      if (!(this_present_discountType && that_present_discountType))
        return false;
      if (!this.discountType.equals(that.discountType))
        return false;
    }

    boolean this_present_belongCanteen = true && this.isSetBelongCanteen();
    boolean that_present_belongCanteen = true && that.isSetBelongCanteen();
    if (this_present_belongCanteen || that_present_belongCanteen) {
      if (!(this_present_belongCanteen && that_present_belongCanteen))
        return false;
      if (!this.belongCanteen.equals(that.belongCanteen))
        return false;
    }

    boolean this_present_belongSeller = true && this.isSetBelongSeller();
    boolean that_present_belongSeller = true && that.isSetBelongSeller();
    if (this_present_belongSeller || that_present_belongSeller) {
      if (!(this_present_belongSeller && that_present_belongSeller))
        return false;
      if (!this.belongSeller.equals(that.belongSeller))
        return false;
    }

    boolean this_present_menuPhotoJsons = true && this.isSetMenuPhotoJsons();
    boolean that_present_menuPhotoJsons = true && that.isSetMenuPhotoJsons();
    if (this_present_menuPhotoJsons || that_present_menuPhotoJsons) {
      if (!(this_present_menuPhotoJsons && that_present_menuPhotoJsons))
        return false;
      if (!this.menuPhotoJsons.equals(that.menuPhotoJsons))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_extraData1 = true && this.isSetExtraData1();
    boolean that_present_extraData1 = true && that.isSetExtraData1();
    if (this_present_extraData1 || that_present_extraData1) {
      if (!(this_present_extraData1 && that_present_extraData1))
        return false;
      if (!this.extraData1.equals(that.extraData1))
        return false;
    }

    boolean this_present_extraData2 = true && this.isSetExtraData2();
    boolean that_present_extraData2 = true && that.isSetExtraData2();
    if (this_present_extraData2 || that_present_extraData2) {
      if (!(this_present_extraData2 && that_present_extraData2))
        return false;
      if (!this.extraData2.equals(that.extraData2))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_onSaleTime = true;
    boolean that_present_onSaleTime = true;
    if (this_present_onSaleTime || that_present_onSaleTime) {
      if (!(this_present_onSaleTime && that_present_onSaleTime))
        return false;
      if (this.onSaleTime != that.onSaleTime)
        return false;
    }

    boolean this_present_offSaleTime = true;
    boolean that_present_offSaleTime = true;
    if (this_present_offSaleTime || that_present_offSaleTime) {
      if (!(this_present_offSaleTime && that_present_offSaleTime))
        return false;
      if (this.offSaleTime != that.offSaleTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MenuDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MenuDetail typedOther = (MenuDetail)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuId()).compareTo(typedOther.isSetMenuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuId()) {
      lastComparison = TBaseHelper.compareTo(this.menuId, typedOther.menuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuName()).compareTo(typedOther.isSetMenuName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuName()) {
      lastComparison = TBaseHelper.compareTo(this.menuName, typedOther.menuName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassification()).compareTo(typedOther.isSetClassification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassification()) {
      lastComparison = TBaseHelper.compareTo(this.classification, typedOther.classification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPrice()).compareTo(typedOther.isSetActualPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPrice()) {
      lastComparison = TBaseHelper.compareTo(this.actualPrice, typedOther.actualPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginPrice()).compareTo(typedOther.isSetOriginPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginPrice()) {
      lastComparison = TBaseHelper.compareTo(this.originPrice, typedOther.originPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountType()).compareTo(typedOther.isSetDiscountType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountType()) {
      lastComparison = TBaseHelper.compareTo(this.discountType, typedOther.discountType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBelongCanteen()).compareTo(typedOther.isSetBelongCanteen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBelongCanteen()) {
      lastComparison = TBaseHelper.compareTo(this.belongCanteen, typedOther.belongCanteen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBelongSeller()).compareTo(typedOther.isSetBelongSeller());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBelongSeller()) {
      lastComparison = TBaseHelper.compareTo(this.belongSeller, typedOther.belongSeller);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuPhotoJsons()).compareTo(typedOther.isSetMenuPhotoJsons());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuPhotoJsons()) {
      lastComparison = TBaseHelper.compareTo(this.menuPhotoJsons, typedOther.menuPhotoJsons);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraData1()).compareTo(typedOther.isSetExtraData1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraData1()) {
      lastComparison = TBaseHelper.compareTo(this.extraData1, typedOther.extraData1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraData2()).compareTo(typedOther.isSetExtraData2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraData2()) {
      lastComparison = TBaseHelper.compareTo(this.extraData2, typedOther.extraData2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnSaleTime()).compareTo(typedOther.isSetOnSaleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnSaleTime()) {
      lastComparison = TBaseHelper.compareTo(this.onSaleTime, typedOther.onSaleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffSaleTime()).compareTo(typedOther.isSetOffSaleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffSaleTime()) {
      lastComparison = TBaseHelper.compareTo(this.offSaleTime, typedOther.offSaleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MENU_ID
          if (field.type == TType.STRING) {
            this.menuId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MENU_NAME
          if (field.type == TType.STRING) {
            this.menuName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CLASSIFICATION
          if (field.type == TType.STRING) {
            this.classification = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DESCRIPTION
          if (field.type == TType.STRING) {
            this.description = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ACTUAL_PRICE
          if (field.type == TType.I64) {
            this.actualPrice = iprot.readI64();
            setActualPriceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // ORIGIN_PRICE
          if (field.type == TType.I64) {
            this.originPrice = iprot.readI64();
            setOriginPriceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // DISCOUNT_TYPE
          if (field.type == TType.STRING) {
            this.discountType = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // BELONG_CANTEEN
          if (field.type == TType.STRING) {
            this.belongCanteen = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // BELONG_SELLER
          if (field.type == TType.STRING) {
            this.belongSeller = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // MENU_PHOTO_JSONS
          if (field.type == TType.STRING) {
            this.menuPhotoJsons = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // STATUS
          if (field.type == TType.STRING) {
            this.status = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // EXTRA_DATA1
          if (field.type == TType.STRING) {
            this.extraData1 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // EXTRA_DATA2
          if (field.type == TType.STRING) {
            this.extraData2 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // CREATE_TIME
          if (field.type == TType.I64) {
            this.createTime = iprot.readI64();
            setCreateTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // UPDATE_TIME
          if (field.type == TType.I64) {
            this.updateTime = iprot.readI64();
            setUpdateTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // ON_SALE_TIME
          if (field.type == TType.I64) {
            this.onSaleTime = iprot.readI64();
            setOnSaleTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // OFF_SALE_TIME
          if (field.type == TType.I64) {
            this.offSaleTime = iprot.readI64();
            setOffSaleTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    if (this.menuId != null) {
      oprot.writeFieldBegin(MENU_ID_FIELD_DESC);
      oprot.writeString(this.menuId);
      oprot.writeFieldEnd();
    }
    if (this.menuName != null) {
      oprot.writeFieldBegin(MENU_NAME_FIELD_DESC);
      oprot.writeString(this.menuName);
      oprot.writeFieldEnd();
    }
    if (this.classification != null) {
      oprot.writeFieldBegin(CLASSIFICATION_FIELD_DESC);
      oprot.writeString(this.classification);
      oprot.writeFieldEnd();
    }
    if (this.description != null) {
      oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.description);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ACTUAL_PRICE_FIELD_DESC);
    oprot.writeI64(this.actualPrice);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ORIGIN_PRICE_FIELD_DESC);
    oprot.writeI64(this.originPrice);
    oprot.writeFieldEnd();
    if (this.discountType != null) {
      oprot.writeFieldBegin(DISCOUNT_TYPE_FIELD_DESC);
      oprot.writeString(this.discountType);
      oprot.writeFieldEnd();
    }
    if (this.belongCanteen != null) {
      oprot.writeFieldBegin(BELONG_CANTEEN_FIELD_DESC);
      oprot.writeString(this.belongCanteen);
      oprot.writeFieldEnd();
    }
    if (this.belongSeller != null) {
      oprot.writeFieldBegin(BELONG_SELLER_FIELD_DESC);
      oprot.writeString(this.belongSeller);
      oprot.writeFieldEnd();
    }
    if (this.menuPhotoJsons != null) {
      oprot.writeFieldBegin(MENU_PHOTO_JSONS_FIELD_DESC);
      oprot.writeString(this.menuPhotoJsons);
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeString(this.status);
      oprot.writeFieldEnd();
    }
    if (this.extraData1 != null) {
      oprot.writeFieldBegin(EXTRA_DATA1_FIELD_DESC);
      oprot.writeString(this.extraData1);
      oprot.writeFieldEnd();
    }
    if (this.extraData2 != null) {
      oprot.writeFieldBegin(EXTRA_DATA2_FIELD_DESC);
      oprot.writeString(this.extraData2);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
    oprot.writeI64(this.createTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
    oprot.writeI64(this.updateTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ON_SALE_TIME_FIELD_DESC);
    oprot.writeI64(this.onSaleTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(OFF_SALE_TIME_FIELD_DESC);
    oprot.writeI64(this.offSaleTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MenuDetail(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuId:");
    if (this.menuId == null) {
      sb.append("null");
    } else {
      sb.append(this.menuId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuName:");
    if (this.menuName == null) {
      sb.append("null");
    } else {
      sb.append(this.menuName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classification:");
    if (this.classification == null) {
      sb.append("null");
    } else {
      sb.append(this.classification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPrice:");
    sb.append(this.actualPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originPrice:");
    sb.append(this.originPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discountType:");
    if (this.discountType == null) {
      sb.append("null");
    } else {
      sb.append(this.discountType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("belongCanteen:");
    if (this.belongCanteen == null) {
      sb.append("null");
    } else {
      sb.append(this.belongCanteen);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("belongSeller:");
    if (this.belongSeller == null) {
      sb.append("null");
    } else {
      sb.append(this.belongSeller);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuPhotoJsons:");
    if (this.menuPhotoJsons == null) {
      sb.append("null");
    } else {
      sb.append(this.menuPhotoJsons);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraData1:");
    if (this.extraData1 == null) {
      sb.append("null");
    } else {
      sb.append(this.extraData1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraData2:");
    if (this.extraData2 == null) {
      sb.append("null");
    } else {
      sb.append(this.extraData2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onSaleTime:");
    sb.append(this.onSaleTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offSaleTime:");
    sb.append(this.offSaleTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

