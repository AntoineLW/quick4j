/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.eliteams.quick4j.web.model.school;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class StaffDetail implements TBase<StaffDetail, StaffDetail._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("StaffDetail");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField STAFF_ID_FIELD_DESC = new TField("staffId", TType.STRING, (short)2);
  private static final TField LOGIN_TYPE_FIELD_DESC = new TField("loginType", TType.STRING, (short)3);
  private static final TField LOGIN_ID_FIELD_DESC = new TField("loginId", TType.STRING, (short)4);
  private static final TField LOGIN_PASS_FIELD_DESC = new TField("loginPass", TType.STRING, (short)5);
  private static final TField LOGIN_PASS_ENCRYPT_FIELD_DESC = new TField("loginPassEncrypt", TType.STRING, (short)6);
  private static final TField PHONE_NUMBER_FIELD_DESC = new TField("phoneNumber", TType.STRING, (short)7);
  private static final TField STAFF_TYPE_FIELD_DESC = new TField("staffType", TType.STRING, (short)8);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.STRING, (short)9);
  private static final TField CERT_STATUS_FIELD_DESC = new TField("certStatus", TType.STRING, (short)11);
  private static final TField AVG_SCORE_FIELD_DESC = new TField("avgScore", TType.DOUBLE, (short)12);
  private static final TField TAG_FIELD_DESC = new TField("tag", TType.STRING, (short)13);
  private static final TField FINISH_ORDER_COUNT_FIELD_DESC = new TField("finishOrderCount", TType.I32, (short)14);
  private static final TField ASSIGN_ORDER_COUNT_FIELD_DESC = new TField("assignOrderCount", TType.I32, (short)15);
  private static final TField EXTRA_DATA1_FIELD_DESC = new TField("extraData1", TType.STRING, (short)16);
  private static final TField EXTRA_DATA2_FIELD_DESC = new TField("extraData2", TType.STRING, (short)17);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.I64, (short)18);
  private static final TField UPDATE_TIME_FIELD_DESC = new TField("updateTime", TType.I64, (short)19);
  private static final TField REGISTER_TIME_FIELD_DESC = new TField("registerTime", TType.I64, (short)20);
  private static final TField LAST_RECEPTION_TIME_FIELD_DESC = new TField("lastReceptionTime", TType.I64, (short)21);

  public long id;
  public String staffId;
  public String loginType;
  public String loginId;
  public String loginPass;
  public String loginPassEncrypt;
  public String phoneNumber;
  public String staffType;
  public String status;
  public String certStatus;
  public double avgScore;
  public String tag;
  public int finishOrderCount;
  public int assignOrderCount;
  public String extraData1;
  public String extraData2;
  public long createTime;
  public long updateTime;
  public long registerTime;
  public long lastReceptionTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    STAFF_ID((short)2, "staffId"),
    LOGIN_TYPE((short)3, "loginType"),
    LOGIN_ID((short)4, "loginId"),
    LOGIN_PASS((short)5, "loginPass"),
    LOGIN_PASS_ENCRYPT((short)6, "loginPassEncrypt"),
    PHONE_NUMBER((short)7, "phoneNumber"),
    STAFF_TYPE((short)8, "staffType"),
    STATUS((short)9, "status"),
    CERT_STATUS((short)11, "certStatus"),
    AVG_SCORE((short)12, "avgScore"),
    TAG((short)13, "tag"),
    FINISH_ORDER_COUNT((short)14, "finishOrderCount"),
    ASSIGN_ORDER_COUNT((short)15, "assignOrderCount"),
    EXTRA_DATA1((short)16, "extraData1"),
    EXTRA_DATA2((short)17, "extraData2"),
    CREATE_TIME((short)18, "createTime"),
    UPDATE_TIME((short)19, "updateTime"),
    REGISTER_TIME((short)20, "registerTime"),
    LAST_RECEPTION_TIME((short)21, "lastReceptionTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STAFF_ID
          return STAFF_ID;
        case 3: // LOGIN_TYPE
          return LOGIN_TYPE;
        case 4: // LOGIN_ID
          return LOGIN_ID;
        case 5: // LOGIN_PASS
          return LOGIN_PASS;
        case 6: // LOGIN_PASS_ENCRYPT
          return LOGIN_PASS_ENCRYPT;
        case 7: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 8: // STAFF_TYPE
          return STAFF_TYPE;
        case 9: // STATUS
          return STATUS;
        case 11: // CERT_STATUS
          return CERT_STATUS;
        case 12: // AVG_SCORE
          return AVG_SCORE;
        case 13: // TAG
          return TAG;
        case 14: // FINISH_ORDER_COUNT
          return FINISH_ORDER_COUNT;
        case 15: // ASSIGN_ORDER_COUNT
          return ASSIGN_ORDER_COUNT;
        case 16: // EXTRA_DATA1
          return EXTRA_DATA1;
        case 17: // EXTRA_DATA2
          return EXTRA_DATA2;
        case 18: // CREATE_TIME
          return CREATE_TIME;
        case 19: // UPDATE_TIME
          return UPDATE_TIME;
        case 20: // REGISTER_TIME
          return REGISTER_TIME;
        case 21: // LAST_RECEPTION_TIME
          return LAST_RECEPTION_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AVGSCORE_ISSET_ID = 1;
  private static final int __FINISHORDERCOUNT_ISSET_ID = 2;
  private static final int __ASSIGNORDERCOUNT_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private static final int __UPDATETIME_ISSET_ID = 5;
  private static final int __REGISTERTIME_ISSET_ID = 6;
  private static final int __LASTRECEPTIONTIME_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.STAFF_ID, new FieldMetaData("staffId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOGIN_TYPE, new FieldMetaData("loginType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOGIN_ID, new FieldMetaData("loginId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PASS, new FieldMetaData("loginPass", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PASS_ENCRYPT, new FieldMetaData("loginPassEncrypt", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new FieldMetaData("phoneNumber", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STAFF_TYPE, new FieldMetaData("staffType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CERT_STATUS, new FieldMetaData("certStatus", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.AVG_SCORE, new FieldMetaData("avgScore", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.TAG, new FieldMetaData("tag", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FINISH_ORDER_COUNT, new FieldMetaData("finishOrderCount", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ASSIGN_ORDER_COUNT, new FieldMetaData("assignOrderCount", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.EXTRA_DATA1, new FieldMetaData("extraData1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA_DATA2, new FieldMetaData("extraData2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new FieldMetaData("updateTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.REGISTER_TIME, new FieldMetaData("registerTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.LAST_RECEPTION_TIME, new FieldMetaData("lastReceptionTime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(StaffDetail.class, metaDataMap);
  }

  public StaffDetail() {
  }

  public StaffDetail(
    long id,
    String staffId,
    String loginType,
    String loginId,
    String loginPass,
    String loginPassEncrypt,
    String phoneNumber,
    String staffType,
    String status,
    String certStatus,
    double avgScore,
    String tag,
    int finishOrderCount,
    int assignOrderCount,
    String extraData1,
    String extraData2,
    long createTime,
    long updateTime,
    long registerTime,
    long lastReceptionTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.staffId = staffId;
    this.loginType = loginType;
    this.loginId = loginId;
    this.loginPass = loginPass;
    this.loginPassEncrypt = loginPassEncrypt;
    this.phoneNumber = phoneNumber;
    this.staffType = staffType;
    this.status = status;
    this.certStatus = certStatus;
    this.avgScore = avgScore;
    setAvgScoreIsSet(true);
    this.tag = tag;
    this.finishOrderCount = finishOrderCount;
    setFinishOrderCountIsSet(true);
    this.assignOrderCount = assignOrderCount;
    setAssignOrderCountIsSet(true);
    this.extraData1 = extraData1;
    this.extraData2 = extraData2;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.registerTime = registerTime;
    setRegisterTimeIsSet(true);
    this.lastReceptionTime = lastReceptionTime;
    setLastReceptionTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StaffDetail(StaffDetail other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetStaffId()) {
      this.staffId = other.staffId;
    }
    if (other.isSetLoginType()) {
      this.loginType = other.loginType;
    }
    if (other.isSetLoginId()) {
      this.loginId = other.loginId;
    }
    if (other.isSetLoginPass()) {
      this.loginPass = other.loginPass;
    }
    if (other.isSetLoginPassEncrypt()) {
      this.loginPassEncrypt = other.loginPassEncrypt;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.isSetStaffType()) {
      this.staffType = other.staffType;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetCertStatus()) {
      this.certStatus = other.certStatus;
    }
    this.avgScore = other.avgScore;
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    this.finishOrderCount = other.finishOrderCount;
    this.assignOrderCount = other.assignOrderCount;
    if (other.isSetExtraData1()) {
      this.extraData1 = other.extraData1;
    }
    if (other.isSetExtraData2()) {
      this.extraData2 = other.extraData2;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.registerTime = other.registerTime;
    this.lastReceptionTime = other.lastReceptionTime;
  }

  public StaffDetail deepCopy() {
    return new StaffDetail(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.staffId = null;
    this.loginType = null;
    this.loginId = null;
    this.loginPass = null;
    this.loginPassEncrypt = null;
    this.phoneNumber = null;
    this.staffType = null;
    this.status = null;
    this.certStatus = null;
    setAvgScoreIsSet(false);
    this.avgScore = 0.0;
    this.tag = null;
    setFinishOrderCountIsSet(false);
    this.finishOrderCount = 0;
    setAssignOrderCountIsSet(false);
    this.assignOrderCount = 0;
    this.extraData1 = null;
    this.extraData2 = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setRegisterTimeIsSet(false);
    this.registerTime = 0;
    setLastReceptionTimeIsSet(false);
    this.lastReceptionTime = 0;
  }

  public long getId() {
    return this.id;
  }

  public StaffDetail setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getStaffId() {
    return this.staffId;
  }

  public StaffDetail setStaffId(String staffId) {
    this.staffId = staffId;
    return this;
  }

  public void unsetStaffId() {
    this.staffId = null;
  }

  /** Returns true if field staffId is set (has been asigned a value) and false otherwise */
  public boolean isSetStaffId() {
    return this.staffId != null;
  }

  public void setStaffIdIsSet(boolean value) {
    if (!value) {
      this.staffId = null;
    }
  }

  public String getLoginType() {
    return this.loginType;
  }

  public StaffDetail setLoginType(String loginType) {
    this.loginType = loginType;
    return this;
  }

  public void unsetLoginType() {
    this.loginType = null;
  }

  /** Returns true if field loginType is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginType() {
    return this.loginType != null;
  }

  public void setLoginTypeIsSet(boolean value) {
    if (!value) {
      this.loginType = null;
    }
  }

  public String getLoginId() {
    return this.loginId;
  }

  public StaffDetail setLoginId(String loginId) {
    this.loginId = loginId;
    return this;
  }

  public void unsetLoginId() {
    this.loginId = null;
  }

  /** Returns true if field loginId is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginId() {
    return this.loginId != null;
  }

  public void setLoginIdIsSet(boolean value) {
    if (!value) {
      this.loginId = null;
    }
  }

  public String getLoginPass() {
    return this.loginPass;
  }

  public StaffDetail setLoginPass(String loginPass) {
    this.loginPass = loginPass;
    return this;
  }

  public void unsetLoginPass() {
    this.loginPass = null;
  }

  /** Returns true if field loginPass is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginPass() {
    return this.loginPass != null;
  }

  public void setLoginPassIsSet(boolean value) {
    if (!value) {
      this.loginPass = null;
    }
  }

  public String getLoginPassEncrypt() {
    return this.loginPassEncrypt;
  }

  public StaffDetail setLoginPassEncrypt(String loginPassEncrypt) {
    this.loginPassEncrypt = loginPassEncrypt;
    return this;
  }

  public void unsetLoginPassEncrypt() {
    this.loginPassEncrypt = null;
  }

  /** Returns true if field loginPassEncrypt is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginPassEncrypt() {
    return this.loginPassEncrypt != null;
  }

  public void setLoginPassEncryptIsSet(boolean value) {
    if (!value) {
      this.loginPassEncrypt = null;
    }
  }

  public String getPhoneNumber() {
    return this.phoneNumber;
  }

  public StaffDetail setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been asigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public String getStaffType() {
    return this.staffType;
  }

  public StaffDetail setStaffType(String staffType) {
    this.staffType = staffType;
    return this;
  }

  public void unsetStaffType() {
    this.staffType = null;
  }

  /** Returns true if field staffType is set (has been asigned a value) and false otherwise */
  public boolean isSetStaffType() {
    return this.staffType != null;
  }

  public void setStaffTypeIsSet(boolean value) {
    if (!value) {
      this.staffType = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public StaffDetail setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getCertStatus() {
    return this.certStatus;
  }

  public StaffDetail setCertStatus(String certStatus) {
    this.certStatus = certStatus;
    return this;
  }

  public void unsetCertStatus() {
    this.certStatus = null;
  }

  /** Returns true if field certStatus is set (has been asigned a value) and false otherwise */
  public boolean isSetCertStatus() {
    return this.certStatus != null;
  }

  public void setCertStatusIsSet(boolean value) {
    if (!value) {
      this.certStatus = null;
    }
  }

  public double getAvgScore() {
    return this.avgScore;
  }

  public StaffDetail setAvgScore(double avgScore) {
    this.avgScore = avgScore;
    setAvgScoreIsSet(true);
    return this;
  }

  public void unsetAvgScore() {
    __isset_bit_vector.clear(__AVGSCORE_ISSET_ID);
  }

  /** Returns true if field avgScore is set (has been asigned a value) and false otherwise */
  public boolean isSetAvgScore() {
    return __isset_bit_vector.get(__AVGSCORE_ISSET_ID);
  }

  public void setAvgScoreIsSet(boolean value) {
    __isset_bit_vector.set(__AVGSCORE_ISSET_ID, value);
  }

  public String getTag() {
    return this.tag;
  }

  public StaffDetail setTag(String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been asigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public int getFinishOrderCount() {
    return this.finishOrderCount;
  }

  public StaffDetail setFinishOrderCount(int finishOrderCount) {
    this.finishOrderCount = finishOrderCount;
    setFinishOrderCountIsSet(true);
    return this;
  }

  public void unsetFinishOrderCount() {
    __isset_bit_vector.clear(__FINISHORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field finishOrderCount is set (has been asigned a value) and false otherwise */
  public boolean isSetFinishOrderCount() {
    return __isset_bit_vector.get(__FINISHORDERCOUNT_ISSET_ID);
  }

  public void setFinishOrderCountIsSet(boolean value) {
    __isset_bit_vector.set(__FINISHORDERCOUNT_ISSET_ID, value);
  }

  public int getAssignOrderCount() {
    return this.assignOrderCount;
  }

  public StaffDetail setAssignOrderCount(int assignOrderCount) {
    this.assignOrderCount = assignOrderCount;
    setAssignOrderCountIsSet(true);
    return this;
  }

  public void unsetAssignOrderCount() {
    __isset_bit_vector.clear(__ASSIGNORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field assignOrderCount is set (has been asigned a value) and false otherwise */
  public boolean isSetAssignOrderCount() {
    return __isset_bit_vector.get(__ASSIGNORDERCOUNT_ISSET_ID);
  }

  public void setAssignOrderCountIsSet(boolean value) {
    __isset_bit_vector.set(__ASSIGNORDERCOUNT_ISSET_ID, value);
  }

  public String getExtraData1() {
    return this.extraData1;
  }

  public StaffDetail setExtraData1(String extraData1) {
    this.extraData1 = extraData1;
    return this;
  }

  public void unsetExtraData1() {
    this.extraData1 = null;
  }

  /** Returns true if field extraData1 is set (has been asigned a value) and false otherwise */
  public boolean isSetExtraData1() {
    return this.extraData1 != null;
  }

  public void setExtraData1IsSet(boolean value) {
    if (!value) {
      this.extraData1 = null;
    }
  }

  public String getExtraData2() {
    return this.extraData2;
  }

  public StaffDetail setExtraData2(String extraData2) {
    this.extraData2 = extraData2;
    return this;
  }

  public void unsetExtraData2() {
    this.extraData2 = null;
  }

  /** Returns true if field extraData2 is set (has been asigned a value) and false otherwise */
  public boolean isSetExtraData2() {
    return this.extraData2 != null;
  }

  public void setExtraData2IsSet(boolean value) {
    if (!value) {
      this.extraData2 = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public StaffDetail setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bit_vector.clear(__CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return __isset_bit_vector.get(__CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public StaffDetail setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bit_vector.clear(__UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return __isset_bit_vector.get(__UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATETIME_ISSET_ID, value);
  }

  public long getRegisterTime() {
    return this.registerTime;
  }

  public StaffDetail setRegisterTime(long registerTime) {
    this.registerTime = registerTime;
    setRegisterTimeIsSet(true);
    return this;
  }

  public void unsetRegisterTime() {
    __isset_bit_vector.clear(__REGISTERTIME_ISSET_ID);
  }

  /** Returns true if field registerTime is set (has been asigned a value) and false otherwise */
  public boolean isSetRegisterTime() {
    return __isset_bit_vector.get(__REGISTERTIME_ISSET_ID);
  }

  public void setRegisterTimeIsSet(boolean value) {
    __isset_bit_vector.set(__REGISTERTIME_ISSET_ID, value);
  }

  public long getLastReceptionTime() {
    return this.lastReceptionTime;
  }

  public StaffDetail setLastReceptionTime(long lastReceptionTime) {
    this.lastReceptionTime = lastReceptionTime;
    setLastReceptionTimeIsSet(true);
    return this;
  }

  public void unsetLastReceptionTime() {
    __isset_bit_vector.clear(__LASTRECEPTIONTIME_ISSET_ID);
  }

  /** Returns true if field lastReceptionTime is set (has been asigned a value) and false otherwise */
  public boolean isSetLastReceptionTime() {
    return __isset_bit_vector.get(__LASTRECEPTIONTIME_ISSET_ID);
  }

  public void setLastReceptionTimeIsSet(boolean value) {
    __isset_bit_vector.set(__LASTRECEPTIONTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case STAFF_ID:
      if (value == null) {
        unsetStaffId();
      } else {
        setStaffId((String)value);
      }
      break;

    case LOGIN_TYPE:
      if (value == null) {
        unsetLoginType();
      } else {
        setLoginType((String)value);
      }
      break;

    case LOGIN_ID:
      if (value == null) {
        unsetLoginId();
      } else {
        setLoginId((String)value);
      }
      break;

    case LOGIN_PASS:
      if (value == null) {
        unsetLoginPass();
      } else {
        setLoginPass((String)value);
      }
      break;

    case LOGIN_PASS_ENCRYPT:
      if (value == null) {
        unsetLoginPassEncrypt();
      } else {
        setLoginPassEncrypt((String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((String)value);
      }
      break;

    case STAFF_TYPE:
      if (value == null) {
        unsetStaffType();
      } else {
        setStaffType((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case CERT_STATUS:
      if (value == null) {
        unsetCertStatus();
      } else {
        setCertStatus((String)value);
      }
      break;

    case AVG_SCORE:
      if (value == null) {
        unsetAvgScore();
      } else {
        setAvgScore((Double)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((String)value);
      }
      break;

    case FINISH_ORDER_COUNT:
      if (value == null) {
        unsetFinishOrderCount();
      } else {
        setFinishOrderCount((Integer)value);
      }
      break;

    case ASSIGN_ORDER_COUNT:
      if (value == null) {
        unsetAssignOrderCount();
      } else {
        setAssignOrderCount((Integer)value);
      }
      break;

    case EXTRA_DATA1:
      if (value == null) {
        unsetExtraData1();
      } else {
        setExtraData1((String)value);
      }
      break;

    case EXTRA_DATA2:
      if (value == null) {
        unsetExtraData2();
      } else {
        setExtraData2((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case REGISTER_TIME:
      if (value == null) {
        unsetRegisterTime();
      } else {
        setRegisterTime((Long)value);
      }
      break;

    case LAST_RECEPTION_TIME:
      if (value == null) {
        unsetLastReceptionTime();
      } else {
        setLastReceptionTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());

    case STAFF_ID:
      return getStaffId();

    case LOGIN_TYPE:
      return getLoginType();

    case LOGIN_ID:
      return getLoginId();

    case LOGIN_PASS:
      return getLoginPass();

    case LOGIN_PASS_ENCRYPT:
      return getLoginPassEncrypt();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case STAFF_TYPE:
      return getStaffType();

    case STATUS:
      return getStatus();

    case CERT_STATUS:
      return getCertStatus();

    case AVG_SCORE:
      return new Double(getAvgScore());

    case TAG:
      return getTag();

    case FINISH_ORDER_COUNT:
      return new Integer(getFinishOrderCount());

    case ASSIGN_ORDER_COUNT:
      return new Integer(getAssignOrderCount());

    case EXTRA_DATA1:
      return getExtraData1();

    case EXTRA_DATA2:
      return getExtraData2();

    case CREATE_TIME:
      return new Long(getCreateTime());

    case UPDATE_TIME:
      return new Long(getUpdateTime());

    case REGISTER_TIME:
      return new Long(getRegisterTime());

    case LAST_RECEPTION_TIME:
      return new Long(getLastReceptionTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STAFF_ID:
      return isSetStaffId();
    case LOGIN_TYPE:
      return isSetLoginType();
    case LOGIN_ID:
      return isSetLoginId();
    case LOGIN_PASS:
      return isSetLoginPass();
    case LOGIN_PASS_ENCRYPT:
      return isSetLoginPassEncrypt();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case STAFF_TYPE:
      return isSetStaffType();
    case STATUS:
      return isSetStatus();
    case CERT_STATUS:
      return isSetCertStatus();
    case AVG_SCORE:
      return isSetAvgScore();
    case TAG:
      return isSetTag();
    case FINISH_ORDER_COUNT:
      return isSetFinishOrderCount();
    case ASSIGN_ORDER_COUNT:
      return isSetAssignOrderCount();
    case EXTRA_DATA1:
      return isSetExtraData1();
    case EXTRA_DATA2:
      return isSetExtraData2();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case REGISTER_TIME:
      return isSetRegisterTime();
    case LAST_RECEPTION_TIME:
      return isSetLastReceptionTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StaffDetail)
      return this.equals((StaffDetail)that);
    return false;
  }

  public boolean equals(StaffDetail that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_staffId = true && this.isSetStaffId();
    boolean that_present_staffId = true && that.isSetStaffId();
    if (this_present_staffId || that_present_staffId) {
      if (!(this_present_staffId && that_present_staffId))
        return false;
      if (!this.staffId.equals(that.staffId))
        return false;
    }

    boolean this_present_loginType = true && this.isSetLoginType();
    boolean that_present_loginType = true && that.isSetLoginType();
    if (this_present_loginType || that_present_loginType) {
      if (!(this_present_loginType && that_present_loginType))
        return false;
      if (!this.loginType.equals(that.loginType))
        return false;
    }

    boolean this_present_loginId = true && this.isSetLoginId();
    boolean that_present_loginId = true && that.isSetLoginId();
    if (this_present_loginId || that_present_loginId) {
      if (!(this_present_loginId && that_present_loginId))
        return false;
      if (!this.loginId.equals(that.loginId))
        return false;
    }

    boolean this_present_loginPass = true && this.isSetLoginPass();
    boolean that_present_loginPass = true && that.isSetLoginPass();
    if (this_present_loginPass || that_present_loginPass) {
      if (!(this_present_loginPass && that_present_loginPass))
        return false;
      if (!this.loginPass.equals(that.loginPass))
        return false;
    }

    boolean this_present_loginPassEncrypt = true && this.isSetLoginPassEncrypt();
    boolean that_present_loginPassEncrypt = true && that.isSetLoginPassEncrypt();
    if (this_present_loginPassEncrypt || that_present_loginPassEncrypt) {
      if (!(this_present_loginPassEncrypt && that_present_loginPassEncrypt))
        return false;
      if (!this.loginPassEncrypt.equals(that.loginPassEncrypt))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_staffType = true && this.isSetStaffType();
    boolean that_present_staffType = true && that.isSetStaffType();
    if (this_present_staffType || that_present_staffType) {
      if (!(this_present_staffType && that_present_staffType))
        return false;
      if (!this.staffType.equals(that.staffType))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_certStatus = true && this.isSetCertStatus();
    boolean that_present_certStatus = true && that.isSetCertStatus();
    if (this_present_certStatus || that_present_certStatus) {
      if (!(this_present_certStatus && that_present_certStatus))
        return false;
      if (!this.certStatus.equals(that.certStatus))
        return false;
    }

    boolean this_present_avgScore = true;
    boolean that_present_avgScore = true;
    if (this_present_avgScore || that_present_avgScore) {
      if (!(this_present_avgScore && that_present_avgScore))
        return false;
      if (this.avgScore != that.avgScore)
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_finishOrderCount = true;
    boolean that_present_finishOrderCount = true;
    if (this_present_finishOrderCount || that_present_finishOrderCount) {
      if (!(this_present_finishOrderCount && that_present_finishOrderCount))
        return false;
      if (this.finishOrderCount != that.finishOrderCount)
        return false;
    }

    boolean this_present_assignOrderCount = true;
    boolean that_present_assignOrderCount = true;
    if (this_present_assignOrderCount || that_present_assignOrderCount) {
      if (!(this_present_assignOrderCount && that_present_assignOrderCount))
        return false;
      if (this.assignOrderCount != that.assignOrderCount)
        return false;
    }

    boolean this_present_extraData1 = true && this.isSetExtraData1();
    boolean that_present_extraData1 = true && that.isSetExtraData1();
    if (this_present_extraData1 || that_present_extraData1) {
      if (!(this_present_extraData1 && that_present_extraData1))
        return false;
      if (!this.extraData1.equals(that.extraData1))
        return false;
    }

    boolean this_present_extraData2 = true && this.isSetExtraData2();
    boolean that_present_extraData2 = true && that.isSetExtraData2();
    if (this_present_extraData2 || that_present_extraData2) {
      if (!(this_present_extraData2 && that_present_extraData2))
        return false;
      if (!this.extraData2.equals(that.extraData2))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_registerTime = true;
    boolean that_present_registerTime = true;
    if (this_present_registerTime || that_present_registerTime) {
      if (!(this_present_registerTime && that_present_registerTime))
        return false;
      if (this.registerTime != that.registerTime)
        return false;
    }

    boolean this_present_lastReceptionTime = true;
    boolean that_present_lastReceptionTime = true;
    if (this_present_lastReceptionTime || that_present_lastReceptionTime) {
      if (!(this_present_lastReceptionTime && that_present_lastReceptionTime))
        return false;
      if (this.lastReceptionTime != that.lastReceptionTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StaffDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StaffDetail typedOther = (StaffDetail)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStaffId()).compareTo(typedOther.isSetStaffId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaffId()) {
      lastComparison = TBaseHelper.compareTo(this.staffId, typedOther.staffId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginType()).compareTo(typedOther.isSetLoginType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginType()) {
      lastComparison = TBaseHelper.compareTo(this.loginType, typedOther.loginType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginId()).compareTo(typedOther.isSetLoginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginId()) {
      lastComparison = TBaseHelper.compareTo(this.loginId, typedOther.loginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPass()).compareTo(typedOther.isSetLoginPass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPass()) {
      lastComparison = TBaseHelper.compareTo(this.loginPass, typedOther.loginPass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPassEncrypt()).compareTo(typedOther.isSetLoginPassEncrypt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPassEncrypt()) {
      lastComparison = TBaseHelper.compareTo(this.loginPassEncrypt, typedOther.loginPassEncrypt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNumber()).compareTo(typedOther.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = TBaseHelper.compareTo(this.phoneNumber, typedOther.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStaffType()).compareTo(typedOther.isSetStaffType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaffType()) {
      lastComparison = TBaseHelper.compareTo(this.staffType, typedOther.staffType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertStatus()).compareTo(typedOther.isSetCertStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertStatus()) {
      lastComparison = TBaseHelper.compareTo(this.certStatus, typedOther.certStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgScore()).compareTo(typedOther.isSetAvgScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgScore()) {
      lastComparison = TBaseHelper.compareTo(this.avgScore, typedOther.avgScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = TBaseHelper.compareTo(this.tag, typedOther.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishOrderCount()).compareTo(typedOther.isSetFinishOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishOrderCount()) {
      lastComparison = TBaseHelper.compareTo(this.finishOrderCount, typedOther.finishOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssignOrderCount()).compareTo(typedOther.isSetAssignOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignOrderCount()) {
      lastComparison = TBaseHelper.compareTo(this.assignOrderCount, typedOther.assignOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraData1()).compareTo(typedOther.isSetExtraData1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraData1()) {
      lastComparison = TBaseHelper.compareTo(this.extraData1, typedOther.extraData1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraData2()).compareTo(typedOther.isSetExtraData2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraData2()) {
      lastComparison = TBaseHelper.compareTo(this.extraData2, typedOther.extraData2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterTime()).compareTo(typedOther.isSetRegisterTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterTime()) {
      lastComparison = TBaseHelper.compareTo(this.registerTime, typedOther.registerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastReceptionTime()).compareTo(typedOther.isSetLastReceptionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastReceptionTime()) {
      lastComparison = TBaseHelper.compareTo(this.lastReceptionTime, typedOther.lastReceptionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STAFF_ID
          if (field.type == TType.STRING) {
            this.staffId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LOGIN_TYPE
          if (field.type == TType.STRING) {
            this.loginType = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LOGIN_ID
          if (field.type == TType.STRING) {
            this.loginId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // LOGIN_PASS
          if (field.type == TType.STRING) {
            this.loginPass = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // LOGIN_PASS_ENCRYPT
          if (field.type == TType.STRING) {
            this.loginPassEncrypt = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PHONE_NUMBER
          if (field.type == TType.STRING) {
            this.phoneNumber = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // STAFF_TYPE
          if (field.type == TType.STRING) {
            this.staffType = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // STATUS
          if (field.type == TType.STRING) {
            this.status = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // CERT_STATUS
          if (field.type == TType.STRING) {
            this.certStatus = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // AVG_SCORE
          if (field.type == TType.DOUBLE) {
            this.avgScore = iprot.readDouble();
            setAvgScoreIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // TAG
          if (field.type == TType.STRING) {
            this.tag = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // FINISH_ORDER_COUNT
          if (field.type == TType.I32) {
            this.finishOrderCount = iprot.readI32();
            setFinishOrderCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // ASSIGN_ORDER_COUNT
          if (field.type == TType.I32) {
            this.assignOrderCount = iprot.readI32();
            setAssignOrderCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // EXTRA_DATA1
          if (field.type == TType.STRING) {
            this.extraData1 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // EXTRA_DATA2
          if (field.type == TType.STRING) {
            this.extraData2 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // CREATE_TIME
          if (field.type == TType.I64) {
            this.createTime = iprot.readI64();
            setCreateTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // UPDATE_TIME
          if (field.type == TType.I64) {
            this.updateTime = iprot.readI64();
            setUpdateTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // REGISTER_TIME
          if (field.type == TType.I64) {
            this.registerTime = iprot.readI64();
            setRegisterTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // LAST_RECEPTION_TIME
          if (field.type == TType.I64) {
            this.lastReceptionTime = iprot.readI64();
            setLastReceptionTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    if (this.staffId != null) {
      oprot.writeFieldBegin(STAFF_ID_FIELD_DESC);
      oprot.writeString(this.staffId);
      oprot.writeFieldEnd();
    }
    if (this.loginType != null) {
      oprot.writeFieldBegin(LOGIN_TYPE_FIELD_DESC);
      oprot.writeString(this.loginType);
      oprot.writeFieldEnd();
    }
    if (this.loginId != null) {
      oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
      oprot.writeString(this.loginId);
      oprot.writeFieldEnd();
    }
    if (this.loginPass != null) {
      oprot.writeFieldBegin(LOGIN_PASS_FIELD_DESC);
      oprot.writeString(this.loginPass);
      oprot.writeFieldEnd();
    }
    if (this.loginPassEncrypt != null) {
      oprot.writeFieldBegin(LOGIN_PASS_ENCRYPT_FIELD_DESC);
      oprot.writeString(this.loginPassEncrypt);
      oprot.writeFieldEnd();
    }
    if (this.phoneNumber != null) {
      oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
      oprot.writeString(this.phoneNumber);
      oprot.writeFieldEnd();
    }
    if (this.staffType != null) {
      oprot.writeFieldBegin(STAFF_TYPE_FIELD_DESC);
      oprot.writeString(this.staffType);
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeString(this.status);
      oprot.writeFieldEnd();
    }
    if (this.certStatus != null) {
      oprot.writeFieldBegin(CERT_STATUS_FIELD_DESC);
      oprot.writeString(this.certStatus);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(AVG_SCORE_FIELD_DESC);
    oprot.writeDouble(this.avgScore);
    oprot.writeFieldEnd();
    if (this.tag != null) {
      oprot.writeFieldBegin(TAG_FIELD_DESC);
      oprot.writeString(this.tag);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FINISH_ORDER_COUNT_FIELD_DESC);
    oprot.writeI32(this.finishOrderCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ASSIGN_ORDER_COUNT_FIELD_DESC);
    oprot.writeI32(this.assignOrderCount);
    oprot.writeFieldEnd();
    if (this.extraData1 != null) {
      oprot.writeFieldBegin(EXTRA_DATA1_FIELD_DESC);
      oprot.writeString(this.extraData1);
      oprot.writeFieldEnd();
    }
    if (this.extraData2 != null) {
      oprot.writeFieldBegin(EXTRA_DATA2_FIELD_DESC);
      oprot.writeString(this.extraData2);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
    oprot.writeI64(this.createTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
    oprot.writeI64(this.updateTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
    oprot.writeI64(this.registerTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LAST_RECEPTION_TIME_FIELD_DESC);
    oprot.writeI64(this.lastReceptionTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StaffDetail(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("staffId:");
    if (this.staffId == null) {
      sb.append("null");
    } else {
      sb.append(this.staffId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginType:");
    if (this.loginType == null) {
      sb.append("null");
    } else {
      sb.append(this.loginType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginId:");
    if (this.loginId == null) {
      sb.append("null");
    } else {
      sb.append(this.loginId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginPass:");
    if (this.loginPass == null) {
      sb.append("null");
    } else {
      sb.append(this.loginPass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginPassEncrypt:");
    if (this.loginPassEncrypt == null) {
      sb.append("null");
    } else {
      sb.append(this.loginPassEncrypt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNumber:");
    if (this.phoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("staffType:");
    if (this.staffType == null) {
      sb.append("null");
    } else {
      sb.append(this.staffType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certStatus:");
    if (this.certStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.certStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avgScore:");
    sb.append(this.avgScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tag:");
    if (this.tag == null) {
      sb.append("null");
    } else {
      sb.append(this.tag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishOrderCount:");
    sb.append(this.finishOrderCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assignOrderCount:");
    sb.append(this.assignOrderCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraData1:");
    if (this.extraData1 == null) {
      sb.append("null");
    } else {
      sb.append(this.extraData1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraData2:");
    if (this.extraData2 == null) {
      sb.append("null");
    } else {
      sb.append(this.extraData2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerTime:");
    sb.append(this.registerTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastReceptionTime:");
    sb.append(this.lastReceptionTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

